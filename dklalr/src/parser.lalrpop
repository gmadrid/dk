use std::str::FromStr;
use crate::ast::{ArgsNode, ArgNode, ArgTailNode, BoolNode, CallNode,
                 CallTailNode, ProgramNode,
                 StmtNode, StmtsNode, StmtTailNode, ValueNode};

grammar;

pub Program : ProgramNode = {
    Stmts => {
        let mut m_stmts = <>;
        m_stmts.0.reverse();
        ProgramNode(m_stmts.0)
    }
}

pub Stmts : StmtsNode = {
    <s:Stmt> <ss:Stmts> => {
        let mut m_ss = ss;
        // NOTE: we are building this in reverse.
        m_ss.0.push(s);
        m_ss
    },
    => { StmtsNode(Vec::new()) }
}

pub Stmt : StmtNode = {
    <id:IDENT> <tail:StmtTail> => {
        match tail {
            StmtTailNode::Assign(cn) => StmtNode::Assign(id.to_string(), cn),
            StmtTailNode::Call(args) => StmtNode::Call(CallNode(id.to_string(), args)),
        }
    }
}

pub StmtTail : StmtTailNode = {
    EQ <Call> => StmtTailNode::Assign(<>),
    CallTail => StmtTailNode::Call(<>.0),
}

pub Call : CallNode = {
    <id:IDENT> <args:CallTail> => {
        CallNode(id.to_string(), args.0)
    }
}

pub CallTail : CallTailNode = {
    LPAREN <Args> RPAREN => CallTailNode(<>.0)
}

pub Args: ArgsNode = {
    <aas:Args> COMMA <a:Arg> => { let mut maas = aas; maas.0.push(a); maas },
    <Arg> => ArgsNode(vec![<>])
}

pub Arg: ArgNode = {
    <v:Value> <a:ArgTail> => {
        if a.0.is_some() {
            if let ValueNode::Ident(id) = v {
                ArgNode(a.0.unwrap(), Some(id))
            } else {
                panic!("Expected IDENT for name of argument.")
            }
        } else {
            ArgNode(v, None)
        }
    }
}

pub ArgTail: ArgTailNode = {
    EQ <Value> => ArgTailNode(Some(<>)),
    => ArgTailNode(None),
}

pub Value: ValueNode = {
    IDENT => ValueNode::Ident(<>.to_string()),
    NUMBER => ValueNode::Number(<>.parse::<i32>().unwrap()), // TODO FIX THIS
    STRING => {
        let with_quotes = <>;
        let len = with_quotes.len();
        ValueNode::String(with_quotes[1..(len - 1)].to_string())
    },
    Bool => ValueNode::Bool(<>.0),
}

pub Bool: BoolNode = {
    TRUE => BoolNode(true),
    FALSE => BoolNode(false),
}

match {
    "," => COMMA,
    "=" => EQ,
    "(" => LPAREN,
    ")" => RPAREN,
    r#""\w*""# => STRING,
    r"[_a-zA-Z][_a-zA-Z0-9]*" => IDENT,  // TODO: make this better.
    r"-?\d+" => NUMBER,
    "true" => TRUE,
    "false" => FALSE,
}
